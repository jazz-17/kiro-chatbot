"""initial_migration

Revision ID: d6d358bcec16
Revises:
Create Date: 2025-07-18 12:25:25.456188

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "d6d358bcec16"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "documents",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("filename", sa.String(length=255), nullable=False),
        sa.Column("content_type", sa.String(length=100), nullable=False),
        sa.Column("s3_key", sa.String(length=500), nullable=False),
        sa.Column("processed", sa.Boolean(), nullable=False),
        sa.Column("meta_data", sa.JSON(), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), nullable=False, server_default=sa.func.now()
        ),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("s3_key"),
    )
    op.create_index(
        "idx_documents_created_at", "documents", ["created_at"], unique=False
    )
    op.create_index("idx_documents_filename", "documents", ["filename"], unique=False)
    op.create_index("idx_documents_processed", "documents", ["processed"], unique=False)
    op.create_table(
        "users",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("password_hash", sa.String(length=255), nullable=False),
        sa.Column("encrypted_api_keys", sa.JSON(), nullable=True),
        sa.Column("preferences", sa.JSON(), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), nullable=False, server_default=sa.func.now()
        ),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_table(
        "conversations",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("title", sa.String(length=255), nullable=False),
        sa.Column("provider", sa.String(length=100), nullable=False),
        sa.Column("meta_data", sa.JSON(), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), nullable=False, server_default=sa.func.now()
        ),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_conversations_created_at", "conversations", ["created_at"], unique=False
    )
    op.create_index(
        "idx_conversations_user_id", "conversations", ["user_id"], unique=False
    )
    op.create_table(
        "document_chunks",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("document_id", sa.UUID(), nullable=False),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column("chunk_index", sa.Integer(), nullable=False),
        sa.Column("embedding", postgresql.ARRAY(sa.Float()), nullable=False),
        sa.Column("meta_data", sa.JSON(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(["document_id"], ["documents.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_document_chunks_chunk_index",
        "document_chunks",
        ["chunk_index"],
        unique=False,
    )
    op.create_index(
        "idx_document_chunks_document_id",
        "document_chunks",
        ["document_id"],
        unique=False,
    )
    op.create_table(
        "messages",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("conversation_id", sa.UUID(), nullable=False),
        sa.Column("role", sa.String(length=20), nullable=False),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column("citations", sa.JSON(), nullable=False),
        sa.Column("meta_data", sa.JSON(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["conversation_id"], ["conversations.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_messages_conversation_id", "messages", ["conversation_id"], unique=False
    )
    op.create_index("idx_messages_created_at", "messages", ["created_at"], unique=False)
    op.create_table(
        "rag_debug_logs",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("conversation_id", sa.UUID(), nullable=False),
        sa.Column("message_id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("query", sa.Text(), nullable=False),
        sa.Column("retrieved_chunks", sa.JSON(), nullable=False),
        sa.Column("search_scores", postgresql.ARRAY(sa.Float()), nullable=False),
        sa.Column("prompt_template", sa.Text(), nullable=False),
        sa.Column("final_prompt", sa.Text(), nullable=False),
        sa.Column("response_meta_data", sa.JSON(), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), nullable=False, server_default=sa.func.now()
        ),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["conversation_id"],
            ["conversations.id"],
        ),
        sa.ForeignKeyConstraint(
            ["message_id"],
            ["messages.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_rag_debug_logs_conversation_id",
        "rag_debug_logs",
        ["conversation_id"],
        unique=False,
    )
    op.create_index(
        "idx_rag_debug_logs_created_at", "rag_debug_logs", ["created_at"], unique=False
    )
    op.create_index(
        "idx_rag_debug_logs_message_id", "rag_debug_logs", ["message_id"], unique=False
    )
    op.create_index(
        "idx_rag_debug_logs_user_id", "rag_debug_logs", ["user_id"], unique=False
    )



    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("idx_rag_debug_logs_user_id", table_name="rag_debug_logs")
    op.drop_index("idx_rag_debug_logs_message_id", table_name="rag_debug_logs")
    op.drop_index("idx_rag_debug_logs_created_at", table_name="rag_debug_logs")
    op.drop_index("idx_rag_debug_logs_conversation_id", table_name="rag_debug_logs")
    op.drop_table("rag_debug_logs")
    op.drop_index("idx_messages_created_at", table_name="messages")
    op.drop_index("idx_messages_conversation_id", table_name="messages")
    op.drop_table("messages")
    op.drop_index("idx_document_chunks_document_id", table_name="document_chunks")
    op.drop_index("idx_document_chunks_chunk_index", table_name="document_chunks")
    op.drop_table("document_chunks")
    op.drop_index("idx_conversations_user_id", table_name="conversations")
    op.drop_index("idx_conversations_created_at", table_name="conversations")
    op.drop_table("conversations")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_table("users")
    op.drop_index("idx_documents_processed", table_name="documents")
    op.drop_index("idx_documents_filename", table_name="documents")
    op.drop_index("idx_documents_created_at", table_name="documents")
    op.drop_table("documents")
    # ### end Alembic commands ###
